import mysql.connector
from http.server import BaseHTTPRequestHandler, HTTPServer
import json
import urllib.parse

# MySQL database connection
def get_db_connection():
    return mysql.connector.connect(
        host="localhost",  # Replace with your database host
        user="root",       # Replace with your MySQL username
        password="root",   # Replace with your MySQL password
        database="cricket_tracker"
    )

# Handler class to handle GET and POST requests
class CricketScoreHandler(BaseHTTPRequestHandler):

    # Handle GET request
    def do_GET(self):
        if self.path == '/api/scores':
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT team1_score, team2_score, innings FROM cricket_scores WHERE id = 1')
            result = cursor.fetchone()

            if result:
                response = {
                    'team1_score': result[0],
                    'team2_score': result[1],
                    'innings': result[2]
                }
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(response).encode())
            else:
                self.send_response(404)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'message': 'No score data found.'}).encode())
            
            conn.close()
        else:
            self.send_response(404)
            self.end_headers()

    # Handle POST request
    def do_POST(self):
        if self.path == '/api/scores/update':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)

            # Parse the JSON data sent in the POST request
            data = json.loads(post_data.decode('utf-8'))

            team = data.get('team')
            runs = data.get('runs')

            if not team or not runs:
                self.send_response(400)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'message': 'Team and runs are required.'}).encode())
                return

            conn = get_db_connection()
            cursor = conn.cursor()

            if team == 'team1':
                cursor.execute('UPDATE cricket_scores SET team1_score = team1_score + %s WHERE id = 1', (runs,))
            elif team == 'team2':
                cursor.execute('UPDATE cricket_scores SET team2_score = team2_score + %s WHERE id = 1', (runs,))
            else:
                self.send_response(400)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({'message': 'Invalid team name.'}).encode())
                conn.close()
                return

            conn.commit()
            conn.close()

            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'message': f'Updated {team} score by {runs} runs.'}).encode())
        
        elif self.path == '/api/innings':
            conn = get_db_connection()
            cursor = conn.cursor()

            cursor.execute('UPDATE cricket_scores SET innings = innings + 1 WHERE id = 1')
            conn.commit()
            conn.close()

            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps({'message': 'Innings changed.'}).encode())
        else:
            self.send_response(404)
            self.end_headers()

# Set up and start the server
def run(server_class=HTTPServer, handler_class=CricketScoreHandler, port=8080):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    print(f'Starting server on port {port}...')
    httpd.serve_forever()

if __name__ == '__main__':
    run()
